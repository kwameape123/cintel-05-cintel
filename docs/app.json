[{"name": "app.py", "content": "# --------------------------------------------\n# Import dependencies/Libraries\n# --------------------------------------------\n\n# From shiny, import just reactive and render\nfrom shiny import reactive, render\n# From shiny.express, import just ui and inputs if needed\nfrom shiny.express import ui\n\nimport random\nfrom datetime import datetime\nfrom collections import deque\nimport pandas as pd\nimport plotly.express as px\nimport palmerpenguins\nfrom shinywidgets import render_plotly\nfrom scipy import stats\n\n# --------------------------------------------\n# Import faicons to generate icons from text.\n# --------------------------------------------\n\nfrom faicons import icon_svg\n\n# --------------------------------------------\n# Shiny EXPRESS VERSION\n# --------------------------------------------\n\n# --------------------------------------------\n# First, set a constant UPDATE INTERVAL for all live data\n# Constants are usually defined in uppercase letters\n# Use a type hint to make it clear that it's an integer (: int)\n# --------------------------------------------\n\nUPDATE_INTERVAL_SECS: int = 20\n\n# --------------------------------------------\n# Define a REACTIVE VALUE with a common data structure\n# The reactive value is used to store state (information)\n# Used by all the display components that show this live data.\n# This reactive value is a wrapper around a DEQUE of readings\n# Reactive value keeps track of data stored in deque.\n# --------------------------------------------\n\nDEQUE_SIZE: int = 5\nDEQUE_SIZE_TWO: int = 10\nreactive_value_wrapper = reactive.value(deque(maxlen=DEQUE_SIZE))\nreactive_value_wrapper_two = reactive.value(deque(maxlen=DEQUE_SIZE_TWO))\n\n# --------------------------------------------\n# Initialize a REACTIVE CALC that all display components can call\n# to get the latest data and display it.\n# The calculation is invalidated every UPDATE_INTERVAL_SECS\n# to trigger updates.\n# It returns a tuple with everything needed to display the data.\n# Very easy to expand or modify.\n# --------------------------------------------\n\n@reactive.calc()\ndef reactive_calc_combined():\n    # Invalidate this calculation every UPDATE_INTERVAL_SECS to trigger updates\n    reactive.invalidate_later(UPDATE_INTERVAL_SECS)\n\n    # Data generation logic\n    temp = round(random.uniform(-18, -16), 1)\n    timestamp = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n    new_dictionary_entry = {\"temp\": temp, \"timestamp\": timestamp}\n\n    # get the deque and append the new entry\n    reactive_value_wrapper.get().append(new_dictionary_entry)\n\n    # Get a snapshot of the current deque for any further processing\n    deque_snapshot = reactive_value_wrapper.get()\n\n    # For Display: Convert deque to DataFrame for display\n    df = pd.DataFrame(deque_snapshot)\n\n    # For Display: Get the latest dictionary entry\n    latest_dictionary_entry = new_dictionary_entry\n\n    # Return a tuple with everything we need\n    # Every time we call this function, we'll get all these values\n    return deque_snapshot, df, latest_dictionary_entry\n\n\ndef reactive_calc_generate():\n    # Invalidate this calculation every UPDATE_INTERVAL_SECS to trigger updates\n    reactive.invalidate_later(UPDATE_INTERVAL_SECS)\n\n    ##############################\n    # Get dataset to be presented and load into pandas dataframe\n    ###############################\n    # Dataset Description\n    ###############################\n    # species: penguin species (Chinstrap, Adelie, or Gentoo)\n    # island: island name (Dream, Torgersen, or Biscoe) in the Palmer Archipelago\n    # bill_length_mm: length of the bill in millimeters\n    # bill_depth_mm: depth of the bill in millimeters\n    # flipper_length_mm: length of the flipper in millimeters\n    # body_mass_g: body mass in grams\n    # sex: MALE or FEMALE\n\n    try:\n        # Load the Palmer Penguins dataset\n        penguins_df = palmerpenguins.load_penguins()\n        print(penguins_df)\n        \n        # Generate random rows of penguins_df\n        num_of_rows = 5\n        new_random_rows = penguins_df.sample(n=num_of_rows)\n        \n        # Convert dataframe to dictionary\n        new_random_rows_dict = new_random_rows.to_dict(orient='records')\n        \n        # Get the deque and append the new entry\n        deque_snapshot = reactive_value_wrapper_two.get()  # Assuming this is a deque\n        deque_snapshot.append(new_random_rows_dict)\n        \n        # For Display: Convert deque to DataFrame for display\n        df = pd.DataFrame(deque_snapshot)\n        \n        # Ensure proper data types and handle any errors\n        df = df.assign(\n            species = df['species'].astype(str),island = df['island'].astype(str),\n            bill_length_mm = pd.to_numeric(df['bill_length_mm'], errors='coerce'),\n            body_mass_g = pd.to_numeric(df['body_mass_g'], errors='coerce'),\n            bill_depth_mm = pd.to_numeric(df['bill_depth_mm'], errors='coerce'),\n            flipper_length_mm = pd.to_numeric(df['flipper_length_mm'], errors='coerce'),\n            sex = df['sex'].astype(str)\n        )\n        \n        \n        # For Display: Get the latest dictionary entry\n        latest_random_rows_dict = new_random_rows_dict\n        \n        # Return a tuple with everything we need\n        return deque_snapshot, df, latest_random_rows_dict\n        \n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n        return [], pd.DataFrame(), []\n    \n\n\n# Define the Shiny UI Page layout\n# Call the ui.page_opts() function\n# Set title to a string in quotes that will appear at the top\n# Set fillable to True to use the whole page width for the UI\nui.page_opts(title=\"PyShiny Express: Palmer Penguins of Antarctica Dashboard\", fillable=True)\n\n# Sidebar is typically used for user interaction/information\n# Note the with statement to create the sidebar followed by a colon\n# Everything in the sidebar is indented consistently\nwith ui.sidebar(open=\"open\"):\n    ui.h2(\"Antarctica Explorer\", class_=\"text-center\")\n    ui.p(\n        \"Real-time temperature readings in Antarctica and presentation of randomly selected\\\n        penguin data.\",\n        class_=\"text-center\",\n    )\n    ui.hr()\n    ui.h6(\"Links:\")\n    ui.a(\n        \"GitHub Repository\",\n        href=\"https://github.com/kwameape123/cintel-05-cintel\",\n        target=\"_blank\",\n    )\n    ui.a(\n        \"GitHub App\",\n        href=\"\",\n        target=\"_blank\",\n    )\n    ui.a(\"PyShiny\", href=\"https://shiny.posit.co/py/\", target=\"_blank\")\n    ui.a(\n        \"PyShiny Express\",\n        href=\"https://shiny.posit.co/blog/posts/shiny-express/\",\n        target=\"_blank\",\n    )\n\n# In Shiny Express, everything not in the sidebar is in the main panel\nwith ui.navset_pill(id=\"tab\"): \n    with ui.nav_panel(\"Temperature\"):\n        with ui.layout_columns():\n            with ui.value_box(\n\n                showcase=icon_svg(\"thermometer\"),\n                theme=\"bg-gradient-green-purple\",\n            ):\n                \"Current Temperature\"\n\n                @render.text\n                def display_temp():\n                    \"\"\"Get the latest reading and return a temperature string\"\"\"\n                    deque_snapshot, df, latest_dictionary_entry = reactive_calc_combined()\n                    return f\"{latest_dictionary_entry['temp']} C\"\n\n                \"warmer than usual\"\n\n        with ui.card(full_screen=True):\n            ui.card_header(\"Current Date and Time\")\n\n            @render.text\n            def display_time():\n                \"\"\"Get the latest reading and return a timestamp string\"\"\"\n                deque_snapshot, df, latest_dictionary_entry = reactive_calc_combined()\n                return f\"{latest_dictionary_entry['timestamp']}\"\n\n        with ui.card(full_screen=True):\n            ui.card_header(\"Most Recent Readings\")\n\n            @render.data_frame\n            def display_df():\n                \"\"\"Get the latest reading and return a dataframe with current readings\"\"\"\n                deque_snapshot, df, latest_dictionary_entry = reactive_calc_combined()\n                pd.set_option('display.width', None)        # Use maximum width\n                return render.DataGrid(df, width=\"100%\")\n\n        with ui.card():\n            ui.card_header(\"Chart with Current Trend\")\n\n            @render_plotly\n            def display_plot():\n                # Fetch from the reactive calc function\n                deque_snapshot, df, latest_dictionary_entry = reactive_calc_combined()\n\n                # Ensure the DataFrame is not empty before plotting\n                if not df.empty:\n                    # Convert the 'timestamp' column to datetime for better plotting\n                    df[\"timestamp\"] = pd.to_datetime(df[\"timestamp\"])\n\n                    # Create scatter plot for readings\n                    fig = px.scatter(df,\n                                     x=\"timestamp\",\n                                     y=\"temp\",\n                                     title=\"Temperature Readings with Regression Line\",\n                                     labels={\"temp\": \"Temperature (\u00b0C)\", \"timestamp\": \"Time\"},\n                                     color_discrete_sequence=[\"blue\"])\n\n                    # Linear regression\n                    # For x let's generate a sequence of integers from 0 to len(df)\n                    sequence = range(len(df))\n                    x_vals = list(sequence)\n                    y_vals = df[\"temp\"]\n\n                    slope, intercept, r_value, p_value, std_err = stats.linregress(x_vals, y_vals)\n                    df['best_fit_line'] = [slope * x + intercept for x in x_vals]\n\n                    # Add the regression line to the figure\n                    fig.add_scatter(x=df[\"timestamp\"], y=df['best_fit_line'], mode='lines', name='Regression Line')\n\n                    # Update layout as needed to customize further\n                    fig.update_layout(xaxis_title=\"Time\", yaxis_title=\"Temperature (\u00b0C)\")\n\n                    return fig\n\n    with ui.nav_panel(\"Palmer Penguin Data\"):\n        with ui.card(full_screen=True):\n            ui.card_header(\"Penguin Data Table\")\n            penguins_df = palmerpenguins.load_penguins()\n            @render.data_frame\n            def display_df_one():\n                 pd.set_option('display.width', None)\n                 return render.DataGrid(penguins_df, width=\"100%\")\n              \n        with ui.card(full_screen=True):\n            ui.card_header(\"Random Penguin Data\")     \n            @render.data_frame\n            def display_df_two():\n                \"\"\"Get the latest reading and return a dataframe with current readings\"\"\"\n                deque_snapshot, df, latest_random_rows_dict = reactive_calc_generate()\n                pd.set_option('display.width', None)        # Use maximum width\n                return render.DataGrid(df, width=\"100%\")\n\n", "type": "text"}]